openapi: 3.0.3
info:
  title: User Management API
  description: A simple REST API for managing users with CRUD operations
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /hello:
    get:
      summary: Get a greeting message
      description: Returns a personalized greeting message
      parameters:
        - name: name
          in: query
          required: false
          description: Name to include in the greeting
          schema:
            type: string
            default: ""
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello, John!"

  /:
    post:
      summary: Create a new user
      description: Creates a new user with the provided name and email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserReq'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data

  /all:
    get:
      summary: Get all users
      description: Retrieves a list of all users in the system
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'

  /{id}:
    delete:
      summary: Delete a user
      description: Deletes a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "User deleted successfully"
        '404':
          description: User not found

    put:
      summary: Update a user
      description: Updates an existing user's information (partial updates supported)
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserReq'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
        '404':
          description: User not found

components:
  schemas:
    CreateUserReq:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User's unique identifier
          example: 1
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"

    UserModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User's unique identifier
          example: 1
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"

tags:
  - name: users
    description: User management operations
  - name: greeting
    description: Greeting operations